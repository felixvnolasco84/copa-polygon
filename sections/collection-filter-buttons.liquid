{{ 'section-collection-filter-buttons.css' | asset_url | stylesheet_tag }}
{{ 'base.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}
{{ 'section-main-product.css' | asset_url | stylesheet_tag }}
{{ 'slick-theme.css' | asset_url | stylesheet_tag }}
{{ 'slick.css' | asset_url | stylesheet_tag }}
<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'slick.min.js' | asset_url }}"></script>
{%- liquid
  assign product_types = ''
  assign type_count_string = ''
  
  # First, collect all product types
  for product in collections.all.products
    assign product_type = product.type | strip
    assign product_available = product.available
    if product_type != blank and product_available
      assign product_types = product_types | append: product_type | append: ','
      assign type_count_string = type_count_string | append: product_type | append: '|'
    endif
  endfor
  assign unique_types = product_types | split: ',' | uniq | sort
  
  # For accessories, let's also collect categories
  assign accessory_categories = ''
  for product in collections.all.products
    assign product_type = product.type | strip
    assign product_available = product.available
    if product_type == 'Accesorios' and product_available
      assign category = product.tags | where: "category:" | first | default: product.metafields.custom.category | default: ''
      if category != blank
        # Extract category value from "category:value" tag format if needed
        if category contains "category:"
          assign category = category | remove: "category:" | strip
        endif
        assign accessory_categories = accessory_categories | append: category | append: ','
      endif 
    endif
  endfor
  assign unique_accessory_categories = accessory_categories | split: ',' | uniq | sort
-%}
<div class="collection-filter-buttons page-width section-{{ section.id }}-padding">
  {%- unless section.settings.title == blank -%}
    <h2 class="collection-filter-title {{ section.settings.heading_size }}">
      {{ section.settings.title | escape }}
    </h2>
  {%- endunless -%}
  <div class="collection-filter-buttons__wrapper" data-category-filter>
      <button class="collection-filter-button is-active" 
              data-category="all"
              aria-current="true">
        TODOS
      </button>
    {%- for product_type in unique_types -%}
      {%- if product_type != blank -%}
        <button class="collection-filter-button" 
                data-category="{{ product_type | handle }}"
                {{ block.shopify_attributes }}>
          {{ product_type | upcase }}
        </button>
        
        {%- if product_type == 'Accesorios' and unique_accessory_categories.size > 0 -%}
          {%- for category in unique_accessory_categories -%}
            {%- if category != blank -%}
              <button class="collection-filter-button collection-filter-button--subcategory" 
                      data-category="accessories" 
                      data-subcategory="{{ category | handle }}"
                      {{ block.shopify_attributes }}>
                {{ category | upcase }}
              </button>
            {%- endif -%}
          {%- endfor -%}
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}
  </div>
  <div class="product-carousel-container">
    <div class="carousel">
      <div id="Slider-{{ section.id }}" class="filtering">
        {%- for product in section.settings.collection.products -%}
          {%- assign product_category = '' -%}
          {%- if product.type == 'Accesorios' -%}
            {%- assign category_tag = product.tags | where: "category:" | first | default: '' -%}
            {%- if category_tag != blank and category_tag contains "category:" -%}
              {%- assign product_category = category_tag | remove: "category:" | strip | handle -%}
            {%- else -%}
              {%- assign product_category = product.metafields.custom.category | default: '' | handle -%}
            {%- endif -%}
          {%- endif -%}
          <div id="Slide-{{ section.id }}-{{ forloop.index }}"
               class="grid__item carousel-item {{ product.type | handle }} {% if product_category != blank %}subcategory-{{ product_category }}{% endif %}"
               data-product-type="{{ product.type | handle }}"
               {% if product_category != blank %}data-product-category="{{ product_category }}"{% endif %}>
            {%
              render 'pro-card',
              card_product: product,
              show_quick_add: true
            %}
          </div>
        {%- else -%}
          {%- for i in (1..4) -%}
            <div class="grid__item carousel-item">
              {% render 'pro-card',
                card_product: product,
                show_quick_add: true%}
            </div>
          {%- endfor -%}
        {%- endfor -%}
      </div>
    </div>
  </div>
</div>
{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  
  .collection-filter-button--subcategory {
    margin-left: 1rem;
    font-size: 0.9em;
    background-color: #f8f8f8;
  }
{%- endstyle -%}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.collection-filter-button');
    const filterWrapper = document.querySelector('[data-category-filter]');
    const slider = $("#Slider-{{ section.id }}");
    
    function initCarousel() {
      slider.slick({
        loop: true,
        infinite: true,
        speed: 300,
        centerMode: true,
        centerPadding: '60px',
        slidesToShow: 4,
        slidesToScroll: 1,
        responsive: [
          {
            breakpoint: 990,
            settings: {
              slidesToShow: 2,
              dots: false,
              arrows: true
            }
          },
          {
            breakpoint: 750,
            settings: {
              centerPadding: '40px',
              slidesToShow: 1,
              dots: false,
              arrows: true
            }
          },
          {
            breakpoint: 480,
            settings: {
              centerPadding: '40px',
              slidesToShow: 1,
              dots: false,
              arrows: true
            }
          }
        ]
      });
    }
    
    // Initialize carousel on page load
    initCarousel();
    var filtered = false;
    
    // Sort slider items to group related products together
    function sortSliderItems() {
      const sliderContainer = document.getElementById("Slider-{{ section.id }}");
      
      // Sort accessories by category
      if (sliderContainer) {
        const items = Array.from(sliderContainer.querySelectorAll('.carousel-item.accessories'));
        
        // Group items by category
        const itemsByCategory = {};
        items.forEach(item => {
          const category = item.dataset.productCategory || 'uncategorized';
          if (!itemsByCategory[category]) {
            itemsByCategory[category] = [];
          }
          itemsByCategory[category].push(item);
        });
        
        // Temporarily remove items from DOM
        items.forEach(item => {
          sliderContainer.removeChild(item);
        });
        
        // Add back in category groups
        const categories = Object.keys(itemsByCategory).sort();
        categories.forEach(category => {
          itemsByCategory[category].forEach(item => {
            sliderContainer.appendChild(item);
          });
        });
      }
    }
    
    // Sort items when page loads (before slick initializes)
    sortSliderItems();
    
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const category = this.getAttribute('data-category');
        const subcategory = this.getAttribute('data-subcategory');
        console.log(category, subcategory);
        
        // Remove active class from all buttons
        filterButtons.forEach(btn => btn.classList.remove('is-active'));
        // Add active class to clicked button
        this.classList.add('is-active');
        
        filterWrapper.setAttribute('data-active-category', category);
        
        // Filter slides based on category and subcategory
        slider.slick('slickUnfilter');
        
        if (category === 'all') {
          // Show all products
          slider.slick('slickUnfilter');
        } else if (subcategory) {
          // Filter by subcategory (for accessories)
          let search = ".subcategory-" + subcategory;
          slider.slick('slickFilter', search);
        } else {
          // Filter by product type
          let search = "." + category;
          slider.slick('slickFilter', search);
        }
      });
    });
  });
</script>
{% schema %}
{
  "name": "Products By Category",
  "tag": "section",
  "class": "section section-category-filter",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Heading",
      "default": "Shop by Category"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "Small"
        },
        {
          "value": "h1",
          "label": "Medium"
        },
        {
          "value": "h0",
          "label": "Large"
        }
      ],
      "default": "h1",
      "label": "Heading Size"
    },
    
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "checkbox",
      "id": "enable_quick_add",
      "default": false,
      "label": "Enable quick add"
    },
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "Products By Category"
    }
  ]
}
{% endschema %}